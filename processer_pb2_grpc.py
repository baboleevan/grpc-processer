# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import processer_pb2 as processer__pb2


class ProcesserStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Input = channel.unary_unary(
        '/grpc.Processer/Input',
        request_serializer=processer__pb2.InputRequest.SerializeToString,
        response_deserializer=processer__pb2.OutputResponse.FromString,
        )
    self.Reload = channel.unary_unary(
        '/grpc.Processer/Reload',
        request_serializer=processer__pb2.ReloadRequest.SerializeToString,
        response_deserializer=processer__pb2.Response.FromString,
        )


class ProcesserServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Input(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Reload(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProcesserServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Input': grpc.unary_unary_rpc_method_handler(
          servicer.Input,
          request_deserializer=processer__pb2.InputRequest.FromString,
          response_serializer=processer__pb2.OutputResponse.SerializeToString,
      ),
      'Reload': grpc.unary_unary_rpc_method_handler(
          servicer.Reload,
          request_deserializer=processer__pb2.ReloadRequest.FromString,
          response_serializer=processer__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.Processer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
